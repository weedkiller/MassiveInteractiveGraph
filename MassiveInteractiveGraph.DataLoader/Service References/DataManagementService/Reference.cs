//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MassiveInteractiveGraph.DataLoader.DataManagementService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataManagementNode", Namespace="http://schemas.datacontract.org/2004/07/MassiveInteractiveGraph.Services")]
    [System.SerializableAttribute()]
    public partial class DataManagementNode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LabelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataManagementLink", Namespace="http://schemas.datacontract.org/2004/07/MassiveInteractiveGraph.Services")]
    [System.SerializableAttribute()]
    public partial class DataManagementLink : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Id1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Id2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id1 {
            get {
                return this.Id1Field;
            }
            set {
                if ((this.Id1Field.Equals(value) != true)) {
                    this.Id1Field = value;
                    this.RaisePropertyChanged("Id1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id2 {
            get {
                return this.Id2Field;
            }
            set {
                if ((this.Id2Field.Equals(value) != true)) {
                    this.Id2Field = value;
                    this.RaisePropertyChanged("Id2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataManagementService.IDataManagement")]
    public interface IDataManagement {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataManagement/ListActiveNodes", ReplyAction="http://tempuri.org/IDataManagement/ListActiveNodesResponse")]
        System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode> ListActiveNodes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataManagement/ListActiveNodes", ReplyAction="http://tempuri.org/IDataManagement/ListActiveNodesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode>> ListActiveNodesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataManagement/AddNodes", ReplyAction="http://tempuri.org/IDataManagement/AddNodesResponse")]
        void AddNodes(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode> nodes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataManagement/AddNodes", ReplyAction="http://tempuri.org/IDataManagement/AddNodesResponse")]
        System.Threading.Tasks.Task AddNodesAsync(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode> nodes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataManagement/RemoveNodes", ReplyAction="http://tempuri.org/IDataManagement/RemoveNodesResponse")]
        void RemoveNodes(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode> nodes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataManagement/RemoveNodes", ReplyAction="http://tempuri.org/IDataManagement/RemoveNodesResponse")]
        System.Threading.Tasks.Task RemoveNodesAsync(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode> nodes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataManagement/ListActiveLinks", ReplyAction="http://tempuri.org/IDataManagement/ListActiveLinksResponse")]
        System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementLink> ListActiveLinks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataManagement/ListActiveLinks", ReplyAction="http://tempuri.org/IDataManagement/ListActiveLinksResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementLink>> ListActiveLinksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataManagement/AddLinks", ReplyAction="http://tempuri.org/IDataManagement/AddLinksResponse")]
        void AddLinks(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementLink> links);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataManagement/AddLinks", ReplyAction="http://tempuri.org/IDataManagement/AddLinksResponse")]
        System.Threading.Tasks.Task AddLinksAsync(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementLink> links);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataManagement/RemoveLinks", ReplyAction="http://tempuri.org/IDataManagement/RemoveLinksResponse")]
        void RemoveLinks(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementLink> links);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataManagement/RemoveLinks", ReplyAction="http://tempuri.org/IDataManagement/RemoveLinksResponse")]
        System.Threading.Tasks.Task RemoveLinksAsync(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementLink> links);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataManagement/RenameNodes", ReplyAction="http://tempuri.org/IDataManagement/RenameNodesResponse")]
        void RenameNodes(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode> nodes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataManagement/RenameNodes", ReplyAction="http://tempuri.org/IDataManagement/RenameNodesResponse")]
        System.Threading.Tasks.Task RenameNodesAsync(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode> nodes);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataManagementChannel : MassiveInteractiveGraph.DataLoader.DataManagementService.IDataManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataManagementClient : System.ServiceModel.ClientBase<MassiveInteractiveGraph.DataLoader.DataManagementService.IDataManagement>, MassiveInteractiveGraph.DataLoader.DataManagementService.IDataManagement {
        
        public DataManagementClient() {
        }
        
        public DataManagementClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataManagementClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode> ListActiveNodes() {
            return base.Channel.ListActiveNodes();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode>> ListActiveNodesAsync() {
            return base.Channel.ListActiveNodesAsync();
        }
        
        public void AddNodes(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode> nodes) {
            base.Channel.AddNodes(nodes);
        }
        
        public System.Threading.Tasks.Task AddNodesAsync(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode> nodes) {
            return base.Channel.AddNodesAsync(nodes);
        }
        
        public void RemoveNodes(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode> nodes) {
            base.Channel.RemoveNodes(nodes);
        }
        
        public System.Threading.Tasks.Task RemoveNodesAsync(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode> nodes) {
            return base.Channel.RemoveNodesAsync(nodes);
        }
        
        public System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementLink> ListActiveLinks() {
            return base.Channel.ListActiveLinks();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementLink>> ListActiveLinksAsync() {
            return base.Channel.ListActiveLinksAsync();
        }
        
        public void AddLinks(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementLink> links) {
            base.Channel.AddLinks(links);
        }
        
        public System.Threading.Tasks.Task AddLinksAsync(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementLink> links) {
            return base.Channel.AddLinksAsync(links);
        }
        
        public void RemoveLinks(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementLink> links) {
            base.Channel.RemoveLinks(links);
        }
        
        public System.Threading.Tasks.Task RemoveLinksAsync(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementLink> links) {
            return base.Channel.RemoveLinksAsync(links);
        }
        
        public void RenameNodes(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode> nodes) {
            base.Channel.RenameNodes(nodes);
        }
        
        public System.Threading.Tasks.Task RenameNodesAsync(System.Collections.Generic.List<MassiveInteractiveGraph.DataLoader.DataManagementService.DataManagementNode> nodes) {
            return base.Channel.RenameNodesAsync(nodes);
        }
    }
}
